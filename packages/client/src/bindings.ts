// DO NOT MODIFY. This file was generated by Specta and is used to keep rspc internally type safe.
// Checkout the unit test 'export_internal_types' to see where this files comes from!

/**
 * @internal
 */
export type ProceduresDef = { queries: ProcedureDef; mutations: ProcedureDef; subscriptions: ProcedureDef }

/**
 * The type of a response from rspc.
 * 
 * @internal
 */
export type Response = ({ type: "value"; value: any } | { type: "error"; value: ProcedureError } | { type: "complete" }) & { id: number }

export type ProcedureError = { Exec: Error } | { Resolver: any }

export type Error = { code: ErrorCode; message: string }

/**
 * The type of a request to rspc.
 * 
 * @internal
 */
export type Request = ({ method: "query" } & RequestData) | ({ method: "mutation" } & RequestData) | ({ method: "subscription" } & RequestData) | { method: "subscriptionStop"; id: number }

export type RequestData = { id: number; path: string; input: any | null }

/**
 * Represents a Typescript procedure file which is generated by the Rust code.
 * This is codegenerated Typescript file is how we can validate the types on the frontend match Rust.
 * 
 * @internal
 */
export type ProcedureDef = { key: string; input: any; result: any; error: any }

/**
 * A value that can be a successful result or an error.
 * 
 * @internal
 */
export type ResponseInner = { type: "value"; value: any } | { type: "error"; value: ProcedureError } | { type: "complete" }

/**
 * TODO
 */
export type ErrorCode = "BadRequest" | "Unauthorized" | "Forbidden" | "NotFound" | "Timeout" | "Conflict" | "PreconditionFailed" | "PayloadTooLarge" | "MethodNotSupported" | "ClientClosedRequest" | "InternalServerError"