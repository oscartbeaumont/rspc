use crate::ts::ExportConfiguration;
use crate::*;
use once_cell::sync::Lazy;
use std::collections::BTreeMap;
use std::sync::Mutex;

/// Global type store for collecting custom types to export.
///
/// Populated by `#[ctor]` functions defined in the [`Type`](derive@crate::Type) macro.
pub static TYPES: Lazy<Mutex<BTreeMap<&'static str, DataType>>> = Lazy::new(Default::default);

/// Exports all types in the [`TYPES`](static@crate::export::TYPES) map to the provided TypeScript file.
pub fn ts(conf: &ExportConfiguration, path: &str) -> Result<(), String> {
    let mut out = "// This file has been generated by Specta. DO NOT EDIT.\n\n".to_string();

    for typ in (*TYPES.lock().expect("Failed to acquire lock on 'TYPES'")).values() {
        out += &ts::export_datatype(conf, typ)?;
        out += "\n\n";
    }

    std::fs::write(path, out).map_err(|err| err.to_string())
}
