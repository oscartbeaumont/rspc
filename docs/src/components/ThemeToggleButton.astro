<theme-toggle>
  <div
    class="flex bg-sky-200/50 dark:bg-slate-700 p-2 w-fit mx-auto rounded-lg gap-3 theme-toggle"
  >
    <label class="cursor-pointer text-sky-500 dark:text-slate-50">
      <!-- Sun -->
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-6 h-6 stroke-current fill-current stroke-2 light-toggle"
        viewBox="0 0 24 24"
        width="1.5rem"
        height="1.5rem"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"
        ></path>
      </svg>

      <!-- Moon -->
      <svg
        style="display: none"
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6 fill-current stroke-current dark-toggle"
        viewBox="0 0 20 20"
        width="1.5rem"
        height="1.5rem"
      >
        <path
          d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
        ></path>
      </svg>
    </label>
  </div>
</theme-toggle>

<script>
  const sysPref = window.matchMedia("(prefers-color-scheme: dark)").matches;
  let theme = localStorage.getItem("theme") ?? (sysPref ? "dark" : "light");

  const html = document.querySelector("html");
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      this.persistTheme();

      const themeToggle = this.querySelector<HTMLDivElement>(".theme-toggle");
      if (themeToggle) {
        themeToggle.addEventListener("click", () => {
          theme = theme === "light" ? "dark" : "light";
          this.persistTheme();
        });
      } else {
        console.warn("themeToggle not found");
      }
    }

    persistTheme() {
      const lightToggle = this.querySelector<SVGElement>(".light-toggle");
      const darkToggle = this.querySelector<SVGElement>(".dark-toggle");

      if (theme === "light") {
        if (html) {
          html.classList.remove("dark");
          html.classList.add("light");
        } else {
          console.warn("html element not found");
        }

        if (lightToggle && darkToggle) {
          lightToggle.style.display = "none";
          darkToggle.style.display = "block";
        } else {
          console.warn("lightToggle or darkToggle not found");
        }

        localStorage.setItem("theme", "light");
        window.dispatchEvent(
          new CustomEvent("theme-change", { detail: "light" })
        );
      } else {
        if (html) {
          html.classList.add("dark");
          html.classList.remove("light");
        } else {
          console.warn("html element not found");
        }

        if (lightToggle && darkToggle) {
          lightToggle.style.display = "block";
          darkToggle.style.display = "none";
        } else {
          console.warn("lightToggle or darkToggle not found");
        }

        localStorage.setItem("theme", "dark");
        window.dispatchEvent(
          new CustomEvent("theme-change", { detail: "dark" })
        );
      }
    }
  }

  customElements.define("theme-toggle", ThemeToggle);
</script>
